# TON Lowcode Platform - Main Docker Compose Configuration
# This file orchestrates all services including SonarQube integration

version: '3.8'

networks:
  lowcode-network:
    driver: bridge
    external: false

volumes:
  postgres_data:
  pgadmin_data:
  node_cache:
  npm_cache:
  redis_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  sonarqube_postgres_data:

services:
  # PostgreSQL Database for Main Application
  lowcode-postgres:
    image: postgres:15-alpine
    container_name: lowcode-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-images/node/postgres/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./docker-images/node/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      POSTGRES_DB: lowcode_db
      POSTGRES_USER: lowcode
      POSTGRES_PASSWORD: lowcode_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - lowcode-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lowcode -d lowcode_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  lowcode-redis:
    image: redis:7-alpine
    container_name: lowcode-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --requirepass lowcode_redis_2024
    networks:
      - lowcode-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SonarQube Database
  sonarqube-db:
    image: postgres:15-alpine
    container_name: lowcode-sonarqube-db
    restart: unless-stopped
    volumes:
      - sonarqube_postgres_data:/var/lib/postgresql/data
      - ./docker-images/sonarqube/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    environment:
      POSTGRES_USER: sonarqube
      POSTGRES_PASSWORD: sonarqube_password_2024
      POSTGRES_DB: sonarqubedb
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    networks:
      - lowcode-network
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonarqube -d sonarqubedb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # SonarQube Server
  lowcode-sonarqube:
    image: sonarqube:10.4-community
    container_name: lowcode-sonarqube
    restart: unless-stopped
    depends_on:
      sonarqube-db:
        condition: service_healthy
    ports:
      - "9090:9000"
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
      - ./docker-images/sonarqube/sonarqube.properties:/opt/sonarqube/conf/sonar.properties:ro
    environment:
      # Database Configuration
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonarqubedb
      SONAR_JDBC_USERNAME: sonarqube
      SONAR_JDBC_PASSWORD: sonarqube_password_2024
      
      # JVM Options
      SONAR_CE_JAVAOPTS: "-Xmx2g -Xms128m -XX:+HeapDumpOnOutOfMemoryError"
      SONAR_WEB_JAVAOPTS: "-Xmx1g -Xms128m -XX:+HeapDumpOnOutOfMemoryError"
      
      # System Configuration
      SONAR_WEB_HOST: 0.0.0.0
      SONAR_WEB_PORT: 9000
      SONAR_WEB_CONTEXT: /
      
      # Search Configuration
      SONAR_SEARCH_JAVAOPTS: "-Xmx1g -Xms1g -XX:MaxDirectMemorySize=256m -XX:+HeapDumpOnOutOfMemoryError"
      
      # Security
      SONAR_SECURITY_REALM: 
      SONAR_AUTHENTICATOR_DOWNCASE: true
      
      # Web Server
      SONAR_WEB_SESSION_TIMEOUT_IN_MINUTES: 60
    networks:
      - lowcode-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:9000/api/system/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 262144
        hard: 262144

  # Backend Development Server with SonarQube Integration
  lowcode-portal-service-dev:
    build:
      context: ./docker-images/node
      dockerfile: Dockerfile.backend
      target: development
    container_name: lowcode-portal-service-dev
    working_dir: /app
    volumes:
      - ./lowcode-portal-service:/app:cached
      - node_cache:/home/node/.cache
      - npm_cache:/home/node/.npm
      - /app/node_modules
    ports:
      - "8080:8080"
      - "9229:9229"
    networks:
      - lowcode-network
    environment:
      - NODE_ENV=development
      - PORT=8080
      - DATABASE_HOST=lowcode-postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=lowcode
      - DATABASE_PASSWORD=lowcode_password_2024
      - DATABASE_NAME=lowcode_db
      - DATABASE_SCHEMA=public
      # Redis configuration
      - REDIS_HOST=lowcode-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=lowcode_redis_2024
      # SonarQube configuration
      - SONAR_HOST_URL=http://lowcode-sonarqube:9000
      - SONAR_LOGIN=admin
      - SONAR_PASSWORD=admin
    command: npm run start:debug
    depends_on:
      - lowcode-postgres
      - lowcode-redis
      - lowcode-sonarqube
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Development Server
  lowcode-portal-dev:
    build:
      context: ./docker-images/node
      dockerfile: Dockerfile.frontend
      target: development
    container_name: lowcode-portal-dev
    working_dir: /app
    volumes:
      - ./lowcode-portal:/app:cached
      - node_cache:/home/node/.cache
      - npm_cache:/home/node/.npm
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - lowcode-network
    environment:
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      # SonarQube configuration
      - SONAR_HOST_URL=http://lowcode-sonarqube:9000
      - SONAR_LOGIN=admin
      - SONAR_PASSWORD=admin
    command: npm run dev
    depends_on:
      - lowcode-portal-service-dev
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # SonarQube Scanner (for manual analysis)
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: lowcode-sonar-scanner
    volumes:
      - .:/usr/src:ro
      - ./docker-images/sonarqube/scanner-work:/tmp/scanner-work
    environment:
      SONAR_HOST_URL: http://lowcode-sonarqube:9000
      SONAR_LOGIN: admin
      SONAR_PASSWORD: admin
    networks:
      - lowcode-network
    depends_on:
      - lowcode-sonarqube
    profiles:
      - scanner
    command: tail -f /dev/null

  # PostgreSQL Admin Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: lowcode-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@lowcode.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./docker-images/node/postgres/servers.json:/pgadmin4/servers.json:ro
    networks:
      - lowcode-network
    depends_on:
      - lowcode-postgres
    profiles:
      - pgadmin
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# Additional scripts for easy management
# Run with: docker compose --profile scanner up -d sonar-scanner
# Then: docker exec lowcode-sonar-scanner sonar-scanner