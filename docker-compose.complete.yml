version: '3.8'

networks:
  lowcode-network:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  postgres_data:
  redis_data:
  nginx_logs:
  minio_data:
  vault_data:

services:
  # === Reverse Proxy ===
  nginx:
    image: nginx:alpine
    container_name: lowcode-nginx
    restart: unless-stopped
    ports:
      - "80:80"      # Main application
      - "81:81"      # Admin services
      - "82:82"      # API-only access
      - "443:443"    # HTTPS (when SSL is configured)
    volumes:
      - ./docker-images/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker-images/nginx/ssl:/etc/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - lowcode-network
      - monitoring
    depends_on:
      - lowcode-portal-service
      - grafana
      - prometheus
      - loki
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # === Core Database Services ===
  postgres:
    image: postgres:15-alpine
    container_name: lowcode-postgres
    environment:
      POSTGRES_DB: lowcode_db
      POSTGRES_USER: lowcode_user
      POSTGRES_PASSWORD: lowcode_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker-images/postgresql/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - lowcode-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lowcode_user -d lowcode_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: lowcode-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - lowcode-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # === Backend Service ===
  lowcode-portal-service:
    build:
      context: ./lowcode-portal-service
      dockerfile: Dockerfile.monitoring
    container_name: lowcode-portal-service
    environment:
      - NODE_ENV=production
      - PORT=8888
      - LOG_LEVEL=info
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=lowcode_user
      - DATABASE_PASSWORD=lowcode_password
      - DATABASE_NAME=lowcode_db
      - DATABASE_SCHEMA=public
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOKI_HOST=http://loki:3100
      - PROMETHEUS_ENABLED=true
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=7d
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:3002
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - VAULT_ENDPOINT=http://vault:8200
      - KEYCLOAK_URL=http://keycloak:8888
    volumes:
      - ./lowcode-portal-service/logs:/app/logs
    ports:
      - "8888:8080"
    networks:
      - lowcode-network
      - monitoring
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      loki:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api-docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # === Frontend Service (Optional - if you have it) ===
  # lowcode-portal:
  #   build:
  #     context: ./lowcode-portal
  #   container_name: lowcode-portal
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://localhost/api
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - lowcode-network
  #   depends_on:
  #     - lowcode-portal-service
  #   restart: unless-stopped

  # === Infrastructure Services ===
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: lowcode-keycloak
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/lowcode_db
      - KC_DB_USERNAME=lowcode_user
      - KC_DB_PASSWORD=lowcode_password
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_ENABLED=true
    ports:
      - "8080:8080"
    networks:
      - lowcode-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    command: start-dev

  minio:
    image: minio/minio:latest
    container_name: lowcode-minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:81/minio
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    networks:
      - lowcode-network
    restart: unless-stopped
    command: server /data --console-address ":9090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  vault:
    image: hashicorp/vault:latest
    container_name: lowcode-vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
    ports:
      - "8200:8200"
    networks:
      - lowcode-network
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 5s
      retries: 3

  # === Monitoring Stack ===
  prometheus:
    image: prom/prometheus:latest
    container_name: lowcode-prometheus
    ports:
      - "9292:9090"  # Changed from 9090 to avoid conflicts
    volumes:
      - ./docker-images/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker-images/monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: lowcode-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker-images/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./docker-images/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_ALLOW_EMBEDDING=true
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  loki:
    image: grafana/loki:latest
    container_name: lowcode-loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker-images/monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  promtail:
    image: grafana/promtail:latest
    container_name: lowcode-promtail
    ports:
      - "9080:9080"
    volumes:
      - ./docker-images/monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - ./lowcode-portal-service/logs:/var/log/lowcode-portal-service:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter:latest
    container_name: lowcode-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: lowcode-cadvisor
    ports:
      - "8081:8080"  # Changed from 8080 to avoid conflict with backend
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - monitoring
    restart: unless-stopped