# TON Lowcode Platform - Backend Dockerfile  
# Multi-stage build for NestJS application

# Base image with Node.js 20 LTS
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    dumb-init \
    curl \
    postgresql-client \
    git

# Development stage
FROM base AS development
WORKDIR /app

# Create node user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nestjs

# Copy package files
COPY lowcode-portal-service/package*.json ./
COPY lowcode-portal-service/pnpm-lock.yaml* ./

# Install all dependencies (including dev dependencies)
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm install; \
  else \
    npm install; \
  fi

# Copy source code
COPY lowcode-portal-service .

# Change ownership to node user  
RUN chown -R nestjs:nodejs /app
USER nestjs

# Expose ports
EXPOSE 8888 9229

# Set environment
ENV NODE_ENV=development
ENV PORT=8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8888/health || exit 1

# Start development server with hot reload and debug support
CMD ["npm", "run", "start:debug"]

# Dependencies stage for production
FROM base AS deps
WORKDIR /app

# Copy package files
COPY lowcode-portal-service/package*.json ./
COPY lowcode-portal-service/pnpm-lock.yaml* ./

# Install production dependencies only
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm install --frozen-lockfile --prod; \
  elif [ -f package-lock.json ]; then \
    npm ci --only=production --omit=dev; \
  else \
    npm install --only=production; \
  fi

# Build stage
FROM base AS builder
WORKDIR /app

# Copy package files
COPY lowcode-portal-service/package*.json ./
COPY lowcode-portal-service/pnpm-lock.yaml* ./

# Install all dependencies for build
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm install --frozen-lockfile; \
  else \
    npm ci; \
  fi

# Copy source code
COPY lowcode-portal-service .

# Build the application
RUN npm run build

# Production stage
FROM base AS production
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV PORT=8888

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nestjs

# Copy production dependencies
COPY --from=deps --chown=nestjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nestjs:nodejs /app/package*.json ./

# Copy any additional required files
COPY --from=builder --chown=nestjs:nodejs /app/src/migrations ./src/migrations

# Switch to non-root user
USER nestjs

# Expose port
EXPOSE 8888

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8888/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/main.js"]