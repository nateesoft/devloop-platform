version: '3.8'

networks:
  lowcode-network:
    external: true

volumes:
  kafka_data:
  kafka_logs:
  zookeeper_data:
  zookeeper_logs:
  kafka_ui_data:

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: lowcode-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    networks:
      - lowcode-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: lowcode-kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka_data:/var/lib/kafka/data
      - kafka_logs:/var/lib/kafka/logs
    environment:
      # Basic Configuration
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      
      # Listeners Configuration
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://lowcode-kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      
      # Topic Configuration
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      
      # Log Configuration
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_RETENTION_BYTES: 1073741824  # 1GB
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_CLEANUP_INTERVAL_MS: 300000
      
      # Performance Tuning
      KAFKA_REPLICA_FETCH_MAX_BYTES: 1048576
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_REPLICA_FETCH_MIN_BYTES: 1
      KAFKA_REPLICA_FETCH_WAIT_MAX_MS: 500
      KAFKA_FETCH_PURGATORY_PURGE_INTERVAL_REQUESTS: 1000
      KAFKA_PRODUCER_PURGATORY_PURGE_INTERVAL_REQUESTS: 1000
      
      # Memory Settings
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms1G"
      
      # Compression
      KAFKA_COMPRESSION_TYPE: 'producer'
      
      # Transaction Support (for exactly-once semantics)
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      
      # JMX for Monitoring
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
      
      # Offsets Topic Configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 50
      
      # Group Coordinator Settings
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      
    networks:
      - lowcode-network
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: lowcode-kafka-ui
    restart: unless-stopped
    ports:
      - "8083:8080"
    volumes:
      - kafka_ui_data:/tmp/kafkaui-appdata
    environment:
      KAFKA_CLUSTERS_0_NAME: lowcode-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: false
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: true
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: true
      
      # Security (optional)
      AUTH_TYPE: "LOGIN_FORM"
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: admin123
      
      # UI Configuration
      SERVER_SERVLET_CONTEXT_PATH: /
      LOGGING_LEVEL_COM_PROVECTUS: INFO
    networks:
      - lowcode-network
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-init:
    image: confluentinc/cp-kafka:latest
    container_name: lowcode-kafka-init
    networks:
      - lowcode-network
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:29092 1 30
        echo 'Creating Kafka topics for Lowcode Platform...'
        
        # User Activity Events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic user.activity
        
        # Flow Execution Events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 5 --replication-factor 1 --topic flow.execution
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic flow.completed
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic flow.failed
        
        # Real-time Notifications
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic notifications
        
        # Audit Logs
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic audit.logs
        
        # Analytics Events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 5 --replication-factor 1 --topic analytics.events
        
        # Media Events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic media.events
        
        # Collaboration Events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 5 --replication-factor 1 --topic collaboration.events
        
        # Database Change Events (CDC)
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 3 --replication-factor 1 --topic database.changes
        
        # Error and Dead Letter Queue
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic error.events
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic dead.letter.queue
        
        echo 'Kafka topics created successfully!'
        kafka-topics --list --bootstrap-server kafka:29092
      "
    restart: "no"

  # Schema Registry (Optional - for Avro/JSON Schema support)
  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: lowcode-schema-registry
    restart: unless-stopped
    ports:
      - "8084:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_DEBUG: 'true'
    networks:
      - lowcode-network
    depends_on:
      - kafka
    profiles:
      - schema-registry
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/subjects"]
      interval: 30s
      timeout: 10s
      retries: 3